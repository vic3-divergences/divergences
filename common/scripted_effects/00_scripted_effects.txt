#	Example:
# 
#	example_effect = {
#		x = 100
#		y = 50
#	}
#
#
#	In a script file:
#
#	effect = {
#		example_effect = yes
#	}
#

### Try to keep this updated wiht vanilla

relations_hit_with_power_bloc_leaders = {
	if = {
		limit = {
			has_game_started = yes
		}
		
		every_power_bloc = {
			limit = { 
				NOT = { scope:power_bloc ?= this }			
			}
			power_bloc_leader = {
				root = {
					change_relations = { 
						country = prev
						value = {
							add = -30
							if = {
								limit = {
									is_country_type = unrecognized
									prev = { is_country_type = recognized }
								}
								add = -30
							}
						}
					}
				}
			}
		}		
	}
}

save_neighbor_with_state = {
	random_neighbouring_state = {
		limit = {
			owner = {
				$CRITERIA$
			}
		}
		save_scope_as = neighbor_state
		owner = {
			save_scope_as = neighbor_country
		}

		random_neighbouring_state = {
			limit = {
				owner = ROOT
			}
			save_scope_as = neighbor_neighbor_state
		}
	}
}

save_industrialized_pm_building_and_state = {
	random_scope_building = {
		limit = {
			OR = {
				AND = {
					is_building_type = building_textile_mills
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_textile_mills
								production_method = pm_mechanized_looms
							}
							is_production_method_active = {
								building_type = building_textile_mills
								production_method = pm_automatic_power_looms
							}
						}
					}
				}
				AND = {
					is_building_type = building_furniture_manufacturies
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_furniture_manufacturies
								production_method = pm_mechanized_workshops
							}
							is_production_method_active = {
								building_type = building_furniture_manufacturies
								production_method = pm_watertube_boiler_building_furniture_manufacturies
							}
							is_production_method_active = {
								building_type = building_furniture_manufacturies
								production_method = pm_rotary_valve_engine_building_furniture_manufacturies
							}
							is_production_method_active = {
								building_type = building_furniture_manufacturies
								production_method = pm_assembly_lines_building_furniture_manufacturies
							}
						}
					}
				}
				AND = {
					is_building_type = building_tooling_workshops
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_tooling_workshops
								production_method = pm_watertube_boiler_building_tooling_workshops
							}
							is_production_method_active = {
								building_type = building_tooling_workshops
								production_method = pm_rotary_valve_engine_building_tooling_workshops
							}
							is_production_method_active = {
								building_type = building_tooling_workshops
								production_method = pm_assembly_lines_building_tooling_workshops
							}
						}
					}
				}
				AND = {
					is_building_type = building_paper_mills
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_paper_mills
								production_method = pm_watertube_boiler_building_paper_mills
							}
							is_production_method_active = {
								building_type = building_paper_mills
								production_method = pm_rotary_valve_engine_building_paper_mills
							}
						}
					}
				}
				AND = {
					is_building_type = building_steel_mills
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_steel_mills
								production_method = pm_watertube_boiler_building_steel_mills
							}
							is_production_method_active = {
								building_type = building_steel_mills
								production_method = pm_rotary_valve_engine_building_steel_mills
							}
						}
					}
				}
				AND = {
					is_building_type = building_motor_industry
					state = {
						OR = {
							is_production_method_active = {
								building_type = building_motor_industry
								production_method = pm_watertube_boiler_building_motor_industry
							}
							is_production_method_active = {
								building_type = building_motor_industry
								production_method = pm_rotary_valve_engine_building_motor_industry
							}
						}
					}
				}
			}
		}

		save_scope_as = industrialized_pm_building
		state = {
			save_scope_as = industrialized_pm_state
		}
	}
}

warlord_setup_effect = {
	activate_law = law_type:law_autocracy 
	activate_law = law_type:law_presidential_republic
	activate_law = law_type:law_peasant_levies
		
	every_scope_character = {
		random_list = {
			80 =  {
			}

			20 = {
				add_trait = bandit
			}
		}			
	}
}

scripted_effect_parties_emergence = {
	if = {
		limit = {
			country_has_voting_franchise = no
		}
		custom_tooltip = PARTIES_EMERGENCE
	}

	# Will immediately trigger elections and thus update parties so no need to call update_party_support here
}

scripted_effect_parties_disappearence = {
	if = {
		limit = {
			country_has_voting_franchise = yes
		}
		custom_tooltip = PARTIES_DISAPPEARENCE
	}

	deactivate_parties = yes
}

liberate_slaves = {
	every_scope_pop = {
		limit = {
			is_pop_type = slaves
		}
		if = {
			limit = {
				is_employed = yes
			}
			change_poptype = workplace.type.slaves_role
		}
		else = {
			change_poptype = pop_type:laborers
		}
	}
}

enslave_discriminated_farm_workers = {
	every_scope_pop = {
		limit = {
			is_pop_type = laborers
			pop_acceptance < acceptance_status_4
			OR = {
				pop_employment_building_group = bg_agriculture
				pop_employment_building_group = bg_ranching
				pop_employment_building_group = bg_plantations			
			}
		}
		change_poptype = pop_type:slaves
	}
}

save_revolution_scopes = {
	random_civil_war = {
		limit = {
			is_civil_war_type = revolution
		}
		save_scope_as = ongoing_revolution
	}
	random_political_movement = {
		limit = {
			is_revolutionary = yes
		}
		save_scope_as = ongoing_revolution_movement
	}
}

save_agitator_law_scopes = {
	if = {
		limit = {
			agitator_supports_enaction = yes
		}
		random_scope_character = {
			limit = {
				has_role = agitator
				OR = {
					law_enactment_stance = {
						law = owner.currently_enacting_law.type
						value > neutral
					}
					AND = {	
						law_enactment_stance = {
							law = owner.currently_enacting_law.type
							value = neutral
						}
						interest_group = {
							law_enactment_stance = {
								law = owner.currently_enacting_law.type
								value > neutral
							}
						}
					}
				}
			}
			save_scope_as = supporting_agitator
			interest_group = {
				save_scope_as = agitator_ig
			}
		}
		random_political_movement = {
			limit = {
				law_enactment_stance = {
					law = owner.currently_enacting_law.type
					value > neutral
				}
			}
			save_scope_as = supporting_movement
		}
	}
	
	if = {
		limit = {
			agitator_opposes_enaction = yes
		}
		random_scope_character = {
			limit = {
				has_role = agitator
				OR = {
					law_enactment_stance = {
						law = owner.currently_enacting_law.type
						value < neutral
					}
					AND = {	
						law_enactment_stance = {
							law = owner.currently_enacting_law.type
							value = neutral
						}
						interest_group = {
							law_enactment_stance = {
								law = owner.currently_enacting_law.type
								value < neutral
							}
						}
					}
				}
			}
			save_scope_as = opposing_agitator
			interest_group = {
				save_scope_as = agitator_ig
			}
		}
		random_political_movement = {
			limit = {
				law_enactment_stance = {
					law = owner.currently_enacting_law.type
					value < neutral
				}
			}
			save_scope_as = opposing_movement
		}
	}
}


clean_up_exile_character_roles = { # scope: character
	if = {
		limit = {
			NOT = { has_role = agitator }
		}
		add_character_role = agitator
	}
	if = {
		limit = {
			has_role = politician
		}
		set_as_interest_group_leader = no
		remove_character_role = politician
	}
	if = {
		limit = {
			has_role = general
		}
		remove_character_role = general
	}
	if = {
		limit = {
			has_role = admiral
		}
		remove_character_role = admiral
	}
}

unification_claims_effect = {
	if = {
		limit = {
			any_state_region = {
				any_scope_state = {
					is_homeland_of_country_cultures = ROOT
					NOT = { owner = ROOT }
					NOT = { has_claim_by = ROOT }
				}
			}
		}
		every_state_region = {
			limit = {
				any_scope_state = {
					is_homeland_of_country_cultures = ROOT
					NOT = { owner = ROOT }
					NOT = { has_claim_by = ROOT }
				}
			}
			add_claim = ROOT
		}
	}
	else = {
		add_loyalists = {
			value = 0.05
		}
	}
}

north_asia_expedition_location = {
	if = {
		limit = {
			exists = var:expedition_progress
			var:expedition_progress = 1
		}
		random_state = {
			limit = {
				state_region = s:STATE_YAKUTSK
			}
			save_scope_as = current_expedition_location
		}
	} 
	
	if = {
		limit = {
			exists = var:expedition_progress
			var:expedition_progress = 2
		}
		random_state = {
			limit = {
				state_region = s:STATE_BURYAT 
			}
			save_scope_as = current_expedition_location
		}
	} 
	
	if = {
		limit = {
			exists = var:expedition_progress
			var:expedition_progress = 3
		}
		random_state = {
			limit = {
				state_region = s:STATE_OB
			}
			save_scope_as = current_expedition_location
		}
	} 
	
	if = {
		limit = {
			exists = var:expedition_progress
			var:expedition_progress = 4
		}
		random_state = {
			limit = {
				state_region = s:STATE_TRANS_BAIKAL
			}
			save_scope_as = current_expedition_location
		}
	} 
	
	if = {
		limit = {
			exists = var:expedition_progress
			var:expedition_progress = 5
		}
		random_state = {
			limit = {
				state_region = s:STATE_OKHOTSK
			}
			save_scope_as = current_expedition_location
		}
	} 
	
	if = {
		limit = {
			exists = var:expedition_progress
			var:expedition_progress = 6
		}
		random_state = {
			limit = {
				state_region = s:STATE_CHUKOTKA
			}
			save_scope_as = current_expedition_location
		}
	} 

	if = {
		limit = {
			exists = var:expedition_progress
			var:expedition_progress = 7
		}
		random_state = {
			limit = {
				state_region = s:STATE_KAMCHATKA
			}
			save_scope_as = current_expedition_location
		}
	} 

	if = {
		limit = {
			exists = var:expedition_progress
			var:expedition_progress = 8
		}
		random_state = {
			limit = {
				state_region = s:STATE_URAL
			}
			save_scope_as = current_expedition_location
		}
	} 	

	else = {
		random_state = {
			limit = {
				state_region = s:STATE_UPPER_YENISEYSK
			}
			save_scope_as = current_expedition_location
		}
	}
}
