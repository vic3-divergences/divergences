trade_states = {
	groups= {
		general
	}
	
	requires_approval = yes
	should_notify_third_parties = yes
	show_effect_in_tooltip = yes

	# Either country should have an available state. Trade State is used as a
	# catch all possibilities Diplomatic Action because Grant/Take State are currently
	# limited to Overlords/Subjects.
	state_selection = any_required

	first_state_list = first_country
	second_state_list = second_country
	can_use_obligations = yes
	
	selectable = {
		NOT = { is_country_type = decentralized }
		is_revolutionary = no
		is_subject = no
	}
	
	potential = {
		scope:target_country = {
			NOT = { is_country_type = decentralized }
			is_revolutionary = no
		}
	}
	
	possible = {
		is_diplomatic_play_committed_participant = no
		scope:target_country = { is_diplomatic_play_committed_participant = no }
		custom_tooltip = {
			text = DIPLO_ACTION_RELATIONS_POOR_OR_LESS_NOT
			scope:target_country.relations:root > relations_threshold:poor
		}
		has_diplomatic_relevance = scope:target_country
		is_revolutionary = no
		in_default = no	
		
		# Must have a connection to the state received even after the trade happens
		trigger_if = {
			limit = {
				exists = scope:first_state
				exists = scope:second_state
			}
		
			custom_tooltip = {
				text = DIPLO_ACTION_TRADE_STATES_NOT_SAME_REGION
				NOT = {
					scope:first_state.state_region = scope:second_state.state_region
				}
			}
			
			custom_tooltip = {
				text = DIPLO_ACTION_TRADE_STATES_WOULD_BREAK_CONNECTION
				scope:actor = { 
					any_scope_state = {
						NOT = { this = scope:first_state }	
						OR = {
							any_neighbouring_state = { this = scope:second_state }
							AND = {
								is_coastal = yes
								scope:second_state = { is_coastal = yes }
							}
						}						
					}					
				}					
				scope:target_country = { 
					any_scope_state = {
						NOT = { this = scope:second_state }	
						OR = {
							any_neighbouring_state = { this = scope:first_state }
							AND = {
								is_coastal = yes
								scope:first_state = { is_coastal = yes }
							}
						}						
					}					
				}						
			}
		}
	}
	
	accept_effect = {
		if = {
			limit = { exists = scope:first_state }
			scope:first_state = { set_state_owner = scope:target_country }
		}
		if = {
			limit = { exists = scope:second_state }
			scope:second_state = { set_state_owner = root }
		}		
	}
	
	first_state_trigger = {
		owner = scope:country
		is_capital = no
		is_under_colonization = no
		OR = {
			scope:target_country = { is_adjacent_to_state = root }
			AND = {
				is_coastal = yes		
				scope:target_country = { has_port = yes }
			}
		}
	}
	
	second_state_trigger = {
		owner = scope:target_country
		is_capital = no
		is_under_colonization = no
		OR = {
			scope:country = { is_adjacent_to_state = root }
			AND = {
				is_coastal = yes		
				scope:country = { has_port = yes }
			}
		}		
	}	
	
	ai = {
		check_acceptance_for_will_propose = yes
		
		evaluation_chance = {
			value = 0.1
		}			
	
		propose_score = {
			value = 10
		}
		
		# Selection triggers exist only to pre-filter which state combinations the AI looks at
		# This is done for performance reasons - the more open ended these triggers are, the more it will impact performance
		will_select_as_first_state = {
			is_split_state = yes
			is_under_colonization = no
			is_incorporated = no
			NOT = { is_homeland_of_country_cultures = owner }
			state_is_in_africa = yes
			NOT = { state_region = s:STATE_INDIAN_OCEAN_TERRITORY } # Special exception to african state trading
		}
		
		will_select_as_second_state = {
			is_split_state = yes
			is_under_colonization = no
			is_incorporated = no
			NOT = { is_homeland_of_country_cultures = owner }
			state_is_in_africa = yes
			NOT = { state_region = s:STATE_INDIAN_OCEAN_TERRITORY } # Special exception to african state trading
		}		
		
		will_propose_with_states = {
			exists = scope:first_state
			exists = scope:second_state	
			NOT = { scope:first_state.state_region = scope:second_state.state_region }
			scope:first_state = { 
				is_split_state = yes	
				state_region = { 
					any_scope_state = { owner = scope:target_country }
				}
			}	
			scope:second_state = { 
				is_split_state = yes
				state_region = { 
					any_scope_state = { owner = root }
				}
			}			
		}	
		
		accept_score = {
			value = 0	
			
			if = {
				limit = {
					NOR = {
						exists = scope:first_state
						exists = scope:second_state
					}
				}
				
				add = {
					desc = "DIPLOMATIC_ACCEPTANCE_STATES_NOT_SET"
					value = -1000
				}				
			}
			else = {
				if = {
					limit = {
						exists = scope:second_state
					}
					subtract = {
						value = scope:second_state.ai_state_value:root	
						desc = "DIPLOMATIC_ACCEPTANCE_TRADE_STATE_SECOND_STATE"
						min = 10
					}
				}	
				else_if = {		
					add = {
						value = 100	
						desc = "DIPLOMATIC_ACCEPTANCE_GIVING_AWAY_LAND"						
					}			
				}			

				if = {
					limit = {
						exists = scope:first_state				
					}
					if = {
						limit = { scope:first_state.ai_state_value:root > 0 }
						add = {
							value = scope:first_state.ai_state_value:root	
							desc = "DIPLOMATIC_ACCEPTANCE_TRADE_STATE_FIRST_STATE"						
						}				
					}
					else = {
						add = {
							value = -1000	
							desc = "DIPLOMATIC_ACCEPTANCE_DOES_NOT_WANT_FIRST_STATE"						
						}					
					}
				}

				if = {
					limit = {
						exists = scope:first_state
						exists = scope:second_state						
						scope:first_state = { 
							is_split_state = yes
							state_region = { 
								any_scope_state = { owner = root }
							}
						}	
						scope:second_state = { 
							is_split_state = yes
							state_region = { 
								any_scope_state = { owner = scope:actor }
							}
						}						
					}

					add = {
						value = 25
						desc = "DIPLOMATIC_ACCEPTANCE_TRADE_STATE_SPLIT_STATE_EXCHANGE"						
					}						
				}
			}	
			
			add = {
				desc = "DIPLOMATIC_ACCEPTANCE_PRINCIPLE_SACRED_CIVICS"

				if = {
					limit = {
						AND = {
							scope:actor.power_bloc ?= {
								OR = {
									has_principle = principle:principle_sacred_civics_1
									has_principle = principle:principle_sacred_civics_2
									has_principle = principle:principle_sacred_civics_3
								}
							}
							scope:actor.religion = root.religion
						}
					}
					add = 10
				}
			}			
		}
		
		use_obligation_chance = {
			value = 10
			
			if = {
				limit = {
					scope:target_country = { country_rank > root.country_rank }
				}				
				add = 20
			}				
		}
		
		owe_obligation_chance = {
			value = 0	

			if = {
				limit = {
					scope:target_country = { country_rank > root.country_rank }
				}				
				add = 10
			}				
		}		
	}
}